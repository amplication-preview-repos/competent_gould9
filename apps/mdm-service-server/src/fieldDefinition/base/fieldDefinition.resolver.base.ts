/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FieldDefinition } from "./FieldDefinition";
import { FieldDefinitionCountArgs } from "./FieldDefinitionCountArgs";
import { FieldDefinitionFindManyArgs } from "./FieldDefinitionFindManyArgs";
import { FieldDefinitionFindUniqueArgs } from "./FieldDefinitionFindUniqueArgs";
import { CreateFieldDefinitionArgs } from "./CreateFieldDefinitionArgs";
import { UpdateFieldDefinitionArgs } from "./UpdateFieldDefinitionArgs";
import { DeleteFieldDefinitionArgs } from "./DeleteFieldDefinitionArgs";
import { FieldDefinitionService } from "../fieldDefinition.service";
@graphql.Resolver(() => FieldDefinition)
export class FieldDefinitionResolverBase {
  constructor(protected readonly service: FieldDefinitionService) {}

  async _fieldDefinitionsMeta(
    @graphql.Args() args: FieldDefinitionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FieldDefinition])
  async fieldDefinitions(
    @graphql.Args() args: FieldDefinitionFindManyArgs
  ): Promise<FieldDefinition[]> {
    return this.service.fieldDefinitions(args);
  }

  @graphql.Query(() => FieldDefinition, { nullable: true })
  async fieldDefinition(
    @graphql.Args() args: FieldDefinitionFindUniqueArgs
  ): Promise<FieldDefinition | null> {
    const result = await this.service.fieldDefinition(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FieldDefinition)
  async createFieldDefinition(
    @graphql.Args() args: CreateFieldDefinitionArgs
  ): Promise<FieldDefinition> {
    return await this.service.createFieldDefinition({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => FieldDefinition)
  async updateFieldDefinition(
    @graphql.Args() args: UpdateFieldDefinitionArgs
  ): Promise<FieldDefinition | null> {
    try {
      return await this.service.updateFieldDefinition({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FieldDefinition)
  async deleteFieldDefinition(
    @graphql.Args() args: DeleteFieldDefinitionArgs
  ): Promise<FieldDefinition | null> {
    try {
      return await this.service.deleteFieldDefinition(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
