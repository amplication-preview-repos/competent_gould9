/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  FieldDefinition as PrismaFieldDefinition,
} from "@prisma/client";

export class FieldDefinitionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FieldDefinitionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.fieldDefinition.count(args);
  }

  async fieldDefinitions(
    args: Prisma.FieldDefinitionFindManyArgs
  ): Promise<PrismaFieldDefinition[]> {
    return this.prisma.fieldDefinition.findMany(args);
  }
  async fieldDefinition(
    args: Prisma.FieldDefinitionFindUniqueArgs
  ): Promise<PrismaFieldDefinition | null> {
    return this.prisma.fieldDefinition.findUnique(args);
  }
  async createFieldDefinition(
    args: Prisma.FieldDefinitionCreateArgs
  ): Promise<PrismaFieldDefinition> {
    return this.prisma.fieldDefinition.create(args);
  }
  async updateFieldDefinition(
    args: Prisma.FieldDefinitionUpdateArgs
  ): Promise<PrismaFieldDefinition> {
    return this.prisma.fieldDefinition.update(args);
  }
  async deleteFieldDefinition(
    args: Prisma.FieldDefinitionDeleteArgs
  ): Promise<PrismaFieldDefinition> {
    return this.prisma.fieldDefinition.delete(args);
  }
}
