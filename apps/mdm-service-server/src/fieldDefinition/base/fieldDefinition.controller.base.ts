/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FieldDefinitionService } from "../fieldDefinition.service";
import { FieldDefinitionCreateInput } from "./FieldDefinitionCreateInput";
import { FieldDefinition } from "./FieldDefinition";
import { FieldDefinitionFindManyArgs } from "./FieldDefinitionFindManyArgs";
import { FieldDefinitionWhereUniqueInput } from "./FieldDefinitionWhereUniqueInput";
import { FieldDefinitionUpdateInput } from "./FieldDefinitionUpdateInput";

export class FieldDefinitionControllerBase {
  constructor(protected readonly service: FieldDefinitionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FieldDefinition })
  async createFieldDefinition(
    @common.Body() data: FieldDefinitionCreateInput
  ): Promise<FieldDefinition> {
    return await this.service.createFieldDefinition({
      data: data,
      select: {
        createdAt: true,
        entity: true,
        id: true,
        name: true,
        required: true,
        typeField: true,
        unique: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FieldDefinition] })
  @ApiNestedQuery(FieldDefinitionFindManyArgs)
  async fieldDefinitions(
    @common.Req() request: Request
  ): Promise<FieldDefinition[]> {
    const args = plainToClass(FieldDefinitionFindManyArgs, request.query);
    return this.service.fieldDefinitions({
      ...args,
      select: {
        createdAt: true,
        entity: true,
        id: true,
        name: true,
        required: true,
        typeField: true,
        unique: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FieldDefinition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async fieldDefinition(
    @common.Param() params: FieldDefinitionWhereUniqueInput
  ): Promise<FieldDefinition | null> {
    const result = await this.service.fieldDefinition({
      where: params,
      select: {
        createdAt: true,
        entity: true,
        id: true,
        name: true,
        required: true,
        typeField: true,
        unique: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FieldDefinition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFieldDefinition(
    @common.Param() params: FieldDefinitionWhereUniqueInput,
    @common.Body() data: FieldDefinitionUpdateInput
  ): Promise<FieldDefinition | null> {
    try {
      return await this.service.updateFieldDefinition({
        where: params,
        data: data,
        select: {
          createdAt: true,
          entity: true,
          id: true,
          name: true,
          required: true,
          typeField: true,
          unique: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FieldDefinition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFieldDefinition(
    @common.Param() params: FieldDefinitionWhereUniqueInput
  ): Promise<FieldDefinition | null> {
    try {
      return await this.service.deleteFieldDefinition({
        where: params,
        select: {
          createdAt: true,
          entity: true,
          id: true,
          name: true,
          required: true,
          typeField: true,
          unique: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
