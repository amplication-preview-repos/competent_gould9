/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  EntityDefinition as PrismaEntityDefinition,
} from "@prisma/client";

export class EntityDefinitionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EntityDefinitionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.entityDefinition.count(args);
  }

  async entityDefinitions(
    args: Prisma.EntityDefinitionFindManyArgs
  ): Promise<PrismaEntityDefinition[]> {
    return this.prisma.entityDefinition.findMany(args);
  }
  async entityDefinition(
    args: Prisma.EntityDefinitionFindUniqueArgs
  ): Promise<PrismaEntityDefinition | null> {
    return this.prisma.entityDefinition.findUnique(args);
  }
  async createEntityDefinition(
    args: Prisma.EntityDefinitionCreateArgs
  ): Promise<PrismaEntityDefinition> {
    return this.prisma.entityDefinition.create(args);
  }
  async updateEntityDefinition(
    args: Prisma.EntityDefinitionUpdateArgs
  ): Promise<PrismaEntityDefinition> {
    return this.prisma.entityDefinition.update(args);
  }
  async deleteEntityDefinition(
    args: Prisma.EntityDefinitionDeleteArgs
  ): Promise<PrismaEntityDefinition> {
    return this.prisma.entityDefinition.delete(args);
  }
  async CreateEntityDefinition(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async DeleteEntityDefinition(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async GetEntityDefinitionById(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async GetEntityDefinitions(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async UpdateEntityDefinition(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}
