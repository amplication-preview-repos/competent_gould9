/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EntityDefinitionService } from "../entityDefinition.service";
import { EntityDefinitionCreateInput } from "./EntityDefinitionCreateInput";
import { EntityDefinition } from "./EntityDefinition";
import { EntityDefinitionFindManyArgs } from "./EntityDefinitionFindManyArgs";
import { EntityDefinitionWhereUniqueInput } from "./EntityDefinitionWhereUniqueInput";
import { EntityDefinitionUpdateInput } from "./EntityDefinitionUpdateInput";

export class EntityDefinitionControllerBase {
  constructor(protected readonly service: EntityDefinitionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EntityDefinition })
  async createEntityDefinition(
    @common.Body() data: EntityDefinitionCreateInput
  ): Promise<EntityDefinition> {
    return await this.service.createEntityDefinition({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EntityDefinition] })
  @ApiNestedQuery(EntityDefinitionFindManyArgs)
  async entityDefinitions(
    @common.Req() request: Request
  ): Promise<EntityDefinition[]> {
    const args = plainToClass(EntityDefinitionFindManyArgs, request.query);
    return this.service.entityDefinitions({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EntityDefinition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async entityDefinition(
    @common.Param() params: EntityDefinitionWhereUniqueInput
  ): Promise<EntityDefinition | null> {
    const result = await this.service.entityDefinition({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EntityDefinition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEntityDefinition(
    @common.Param() params: EntityDefinitionWhereUniqueInput,
    @common.Body() data: EntityDefinitionUpdateInput
  ): Promise<EntityDefinition | null> {
    try {
      return await this.service.updateEntityDefinition({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EntityDefinition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEntityDefinition(
    @common.Param() params: EntityDefinitionWhereUniqueInput
  ): Promise<EntityDefinition | null> {
    try {
      return await this.service.deleteEntityDefinition({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/create-entity-definition")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CreateEntityDefinition(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.CreateEntityDefinition(body);
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async DeleteEntityDefinition(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.DeleteEntityDefinition(body);
  }

  @common.Get("/:id/get-entity-definition-by-id")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetEntityDefinitionById(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.GetEntityDefinitionById(body);
  }

  @common.Get("/:id/get-entity-definitions")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetEntityDefinitions(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.GetEntityDefinitions(body);
  }

  @common.Get("/:id/update-entity-definition")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async UpdateEntityDefinition(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.UpdateEntityDefinition(body);
  }
}
