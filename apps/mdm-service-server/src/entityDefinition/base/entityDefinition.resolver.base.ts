/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EntityDefinition } from "./EntityDefinition";
import { EntityDefinitionCountArgs } from "./EntityDefinitionCountArgs";
import { EntityDefinitionFindManyArgs } from "./EntityDefinitionFindManyArgs";
import { EntityDefinitionFindUniqueArgs } from "./EntityDefinitionFindUniqueArgs";
import { CreateEntityDefinitionArgs } from "./CreateEntityDefinitionArgs";
import { UpdateEntityDefinitionArgs } from "./UpdateEntityDefinitionArgs";
import { DeleteEntityDefinitionArgs } from "./DeleteEntityDefinitionArgs";
import { EntityDefinitionService } from "../entityDefinition.service";
@graphql.Resolver(() => EntityDefinition)
export class EntityDefinitionResolverBase {
  constructor(protected readonly service: EntityDefinitionService) {}

  async _entityDefinitionsMeta(
    @graphql.Args() args: EntityDefinitionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EntityDefinition])
  async entityDefinitions(
    @graphql.Args() args: EntityDefinitionFindManyArgs
  ): Promise<EntityDefinition[]> {
    return this.service.entityDefinitions(args);
  }

  @graphql.Query(() => EntityDefinition, { nullable: true })
  async entityDefinition(
    @graphql.Args() args: EntityDefinitionFindUniqueArgs
  ): Promise<EntityDefinition | null> {
    const result = await this.service.entityDefinition(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EntityDefinition)
  async createEntityDefinition(
    @graphql.Args() args: CreateEntityDefinitionArgs
  ): Promise<EntityDefinition> {
    return await this.service.createEntityDefinition({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => EntityDefinition)
  async updateEntityDefinition(
    @graphql.Args() args: UpdateEntityDefinitionArgs
  ): Promise<EntityDefinition | null> {
    try {
      return await this.service.updateEntityDefinition({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EntityDefinition)
  async deleteEntityDefinition(
    @graphql.Args() args: DeleteEntityDefinitionArgs
  ): Promise<EntityDefinition | null> {
    try {
      return await this.service.deleteEntityDefinition(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Query(() => String)
  async CreateEntityDefinition(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.CreateEntityDefinition(args);
  }

  @graphql.Mutation(() => String)
  async DeleteEntityDefinition(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.DeleteEntityDefinition(args);
  }

  @graphql.Query(() => String)
  async GetEntityDefinitionById(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.GetEntityDefinitionById(args);
  }

  @graphql.Query(() => String)
  async GetEntityDefinitions(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.GetEntityDefinitions(args);
  }

  @graphql.Query(() => String)
  async UpdateEntityDefinition(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.UpdateEntityDefinition(args);
  }
}
